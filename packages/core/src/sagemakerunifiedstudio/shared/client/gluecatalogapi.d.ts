
/**
 * THIS FILE IS AUTOGENERATED BY 'generateServiceClient.ts'.
 * DO NOT EDIT BY HAND.
 */

import {Request} from 'aws-sdk/lib/request';
import {Response} from 'aws-sdk/lib/response';
import {AWSError} from 'aws-sdk/lib/error';
import {Service} from 'aws-sdk/lib/service';
import {ServiceConfigurationOptions} from 'aws-sdk/lib/service';
import {ConfigBase as Config} from 'aws-sdk/lib/config-base';
interface Blob {}
declare class GlueCatalogApi extends Service {
  /**
   * Constructs a service object. This object has one method for each API operation.
   */
  constructor(options?: GlueCatalogApi.Types.ClientConfiguration)
  config: Config & GlueCatalogApi.Types.ClientConfiguration;
  /**
   * 
   */
  describeConnectionType(params: GlueCatalogApi.Types.DescribeConnectionTypeRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.DescribeConnectionTypeResponse) => void): Request<GlueCatalogApi.Types.DescribeConnectionTypeResponse, AWSError>;
  /**
   * 
   */
  describeConnectionType(callback?: (err: AWSError, data: GlueCatalogApi.Types.DescribeConnectionTypeResponse) => void): Request<GlueCatalogApi.Types.DescribeConnectionTypeResponse, AWSError>;
  /**
   * 
   */
  getCatalog(params: GlueCatalogApi.Types.GetCatalogRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCatalogResponse) => void): Request<GlueCatalogApi.Types.GetCatalogResponse, AWSError>;
  /**
   * 
   */
  getCatalog(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCatalogResponse) => void): Request<GlueCatalogApi.Types.GetCatalogResponse, AWSError>;
  /**
   * 
   */
  getCatalogs(params: GlueCatalogApi.Types.GetCatalogsRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCatalogsResponse) => void): Request<GlueCatalogApi.Types.GetCatalogsResponse, AWSError>;
  /**
   * 
   */
  getCatalogs(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCatalogsResponse) => void): Request<GlueCatalogApi.Types.GetCatalogsResponse, AWSError>;
  /**
   * 
   */
  getCompletion(params: GlueCatalogApi.Types.GetCompletionRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCompletionResponse) => void): Request<GlueCatalogApi.Types.GetCompletionResponse, AWSError>;
  /**
   * 
   */
  getCompletion(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetCompletionResponse) => void): Request<GlueCatalogApi.Types.GetCompletionResponse, AWSError>;
  /**
   * 
   */
  getEntityRecords(params: GlueCatalogApi.Types.GetEntityRecordsRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetEntityRecordsResponse) => void): Request<GlueCatalogApi.Types.GetEntityRecordsResponse, AWSError>;
  /**
   * 
   */
  getEntityRecords(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetEntityRecordsResponse) => void): Request<GlueCatalogApi.Types.GetEntityRecordsResponse, AWSError>;
  /**
   * 
   */
  getJobRun(params: GlueCatalogApi.Types.GetJobRunRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetJobRunResponse) => void): Request<GlueCatalogApi.Types.GetJobRunResponse, AWSError>;
  /**
   * 
   */
  getJobRun(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetJobRunResponse) => void): Request<GlueCatalogApi.Types.GetJobRunResponse, AWSError>;
  /**
   * 
   */
  getJobRuns(params: GlueCatalogApi.Types.GetJobRunsRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetJobRunsResponse) => void): Request<GlueCatalogApi.Types.GetJobRunsResponse, AWSError>;
  /**
   * 
   */
  getJobRuns(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetJobRunsResponse) => void): Request<GlueCatalogApi.Types.GetJobRunsResponse, AWSError>;
  /**
   * 
   */
  getTable(params: GlueCatalogApi.Types.GetTableRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.GetTableResponse) => void): Request<GlueCatalogApi.Types.GetTableResponse, AWSError>;
  /**
   * 
   */
  getTable(callback?: (err: AWSError, data: GlueCatalogApi.Types.GetTableResponse) => void): Request<GlueCatalogApi.Types.GetTableResponse, AWSError>;
  /**
   * 
   */
  listConnectionTypes(params: GlueCatalogApi.Types.ListConnectionTypesRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.ListConnectionTypesResponse) => void): Request<GlueCatalogApi.Types.ListConnectionTypesResponse, AWSError>;
  /**
   * 
   */
  listConnectionTypes(callback?: (err: AWSError, data: GlueCatalogApi.Types.ListConnectionTypesResponse) => void): Request<GlueCatalogApi.Types.ListConnectionTypesResponse, AWSError>;
  /**
   * 
   */
  startCompletion(params: GlueCatalogApi.Types.StartCompletionRequest, callback?: (err: AWSError, data: GlueCatalogApi.Types.StartCompletionResponse) => void): Request<GlueCatalogApi.Types.StartCompletionResponse, AWSError>;
  /**
   * 
   */
  startCompletion(callback?: (err: AWSError, data: GlueCatalogApi.Types.StartCompletionResponse) => void): Request<GlueCatalogApi.Types.StartCompletionResponse, AWSError>;
}
declare namespace GlueCatalogApi {
  export interface AllowedValue {
    DisplayName: AllowedValueDisplayNameString;
    Description: AllowedValueDescriptionString;
    Value: AllowedValueValueString;
  }
  export type AllowedValueDescriptionString = string;
  export type AllowedValueDisplayNameString = string;
  export type AllowedValueValueString = string;
  export type AllowedValues = AllowedValue[];
  export type ApiVersion = string;
  export type ArnString = string;
  export type AttemptCount = number;
  export interface AttributeCondition {
    Expression?: ExpressionString;
    Scope?: ScopeString;
  }
  export interface AuthConfiguration {
    AuthenticationType: Property;
    SecretArn: Property;
    OAuth2Properties?: PropertiesMap;
    BasicAuthenticationProperties?: PropertiesMap;
    CustomAuthenticationProperties?: PropertiesMap;
  }
  export type AuthenticationType = "BASIC"|"OAUTH2"|"CUSTOM"|string;
  export type AuthenticationTypes = AuthenticationType[];
  export type BlobParametersMap = {[key: string]: BlobParametersMapValue};
  export type BlobParametersMapValue = Buffer|Uint8Array|Blob|string;
  export type Bool = boolean;
  export type Boolean = boolean;
  export type BooleanValue = boolean;
  export interface Capabilities {
    SupportedAuthenticationTypes: AuthenticationTypes;
    SupportedDataOperations: DataOperations;
    SupportedComputeEnvironments: ComputeEnvironments;
  }
  export interface Catalog {
    CatalogId?: CatalogIdString;
    Name?: CatalogNameString;
    Description?: GlueCommonDescriptionString;
    ResourceArn?: ResourceArnString;
    Parameters?: ParametersMap;
    DataParameters?: BlobParametersMap;
    CatalogType?: CatalogType;
    CreateTime?: Timestamp;
    UpdateTime?: Timestamp;
    TargetCatalog?: TargetCatalog;
    FederatedCatalog?: FederatedCatalog;
    CatalogProperties?: CatalogPropertiesOutput;
    CatalogIdentifier?: CatalogIdentifier;
    ParentCatalogIdentifiers?: CatalogIdentifierList;
    ParentCatalogNames?: CatalogNameList;
    CreateTableDefaultPermissions?: PrincipalPermissionsList;
    CreateDatabaseDefaultPermissions?: PrincipalPermissionsList;
  }
  export type CatalogIdString = string;
  export type CatalogIdentifier = string;
  export type CatalogIdentifierList = CatalogIdentifier[];
  export type CatalogList = Catalog[];
  export type CatalogNameList = CatalogNameString[];
  export type CatalogNameString = string;
  export interface CatalogPropertiesOutput {
    DataLakeAccessProperties?: DataLakeAccessPropertiesOutput;
    IcebergOptimizationProperties?: IcebergOptimizationPropertiesOutput;
  }
  export type CatalogType = "REDSHIFT_CATALOG"|"FEDERATED"|"NATIVE"|"REDSHIFT"|"LINKCONTAINER"|"LINK_FEDERATED"|"LINK_NATIVE"|"LINK_REDSHIFT"|string;
  export interface Column {
    Name: NameString;
    Type?: TypeString;
    Comment?: CommentString;
    Parameters?: ParametersMap;
  }
  export type ColumnList = Column[];
  export type ColumnValueStringList = ColumnValuesString[];
  export type ColumnValuesString = string;
  export type CommentString = string;
  export type CompletionIdString = string;
  export type CompletionStatus = "SUBMITTED"|"SUCCEEDED"|"FAILED"|"RUNNING"|"EXPIRED"|"DELETED"|string;
  export type CompletionString = string;
  export type ComputeEnvironment = "SPARK"|"PYTHON"|"ATHENA"|string;
  export interface ComputeEnvironmentConfiguration {
    Name: ComputeEnvironmentName;
    Description: String;
    ComputeEnvironment: ComputeEnvironment;
    SupportedAuthenticationTypes: AuthenticationTypes;
    AdditionalConnectionProperties: PropertiesMap;
    AdditionalConnectionOptions: PropertiesMap;
    ConnectionPropertyNameOverrides: PropertyNameOverrides;
    ConnectionOptionNameOverrides: PropertyNameOverrides;
    ConnectionPropertyExclusions: ListOfString;
    ConnectionOptionExclusions: ListOfString;
    ConnectionPropertiesRequiredOverrides: ListOfString;
    PhysicalConnectionPropertiesRequired?: Bool;
  }
  export type ComputeEnvironmentConfigurationMap = {[key: string]: ComputeEnvironmentConfiguration};
  export type ComputeEnvironmentName = string;
  export type ComputeEnvironments = ComputeEnvironment[];
  export type ConditionStatement = {[key: string]: String};
  export type ConditionStatements = ConditionStatement[];
  export type ConnectionOptions = {[key: string]: OptionValue};
  export type ConnectionType = "JDBC"|"SFTP"|"REDSHIFT"|"ATHENA"|"MONGODB"|"KAFKA"|"NETWORK"|"YARNRESOURCEMANAGER"|"MARKETPLACE"|"HIVE_METASTORE"|"CUSTOM"|"SALESFORCE"|"VIEW_VALIDATION_REDSHIFT"|"VIEW_VALIDATION_ATHENA"|string;
  export interface ConnectionTypeBrief {
    ConnectionType?: ConnectionType;
    DisplayName?: DisplayName;
    Vendor?: Vendor;
    Description?: Description;
    Categories?: ListOfString;
    Capabilities?: Capabilities;
    LogoUrl?: UrlString;
    DocumentationUrl?: UrlString;
    ConnectionTypeVariants?: ConnectionTypeVariantList;
  }
  export type ConnectionTypeList = ConnectionTypeBrief[];
  export interface ConnectionTypeVariant {
    ConnectionTypeVariantName?: DisplayName;
    DisplayName?: DisplayName;
    Description?: Description;
    LogoUrl?: UrlString;
    DocumentationUrl?: UrlString;
  }
  export type ConnectionTypeVariantList = ConnectionTypeVariant[];
  export type DataAccessModeEnum = "LakeFormation"|"Hybrid"|"Other"|string;
  export interface DataLakeAccessPropertiesOutput {
    DataLakeAccess?: Boolean;
    DataTransferRole?: GlueCommonIAMRoleArn;
    KmsKey?: ResourceArnString;
    ManagedWorkgroupName?: GlueCommonNameString;
    ManagedWorkgroupStatus?: GlueCommonNameString;
    NamespaceArn?: ResourceArnString;
    RedshiftDatabaseName?: GlueCommonNameString;
    StatusMessage?: GlueCommonNameString;
    CatalogType?: GlueCommonNameString;
  }
  export interface DataLakePrincipal {
    DataLakePrincipalIdentifier?: DataLakePrincipalString;
    AttributeCondition?: AttributeCondition;
  }
  export type DataLakePrincipalString = string;
  export type DataOperation = "READ"|"WRITE"|string;
  export type DataOperations = DataOperation[];
  export type DataType = "STRING"|"INTEGER"|"BOOLEAN"|"STRING_LIST"|string;
  export type DatabaseIdString = string;
  export interface DescribeConnectionTypeRequest {
    ConnectionType?: NameString;
  }
  export interface DescribeConnectionTypeResponse {
    ConnectionType?: NameString;
    DisplayName?: DisplayName;
    Vendor?: Vendor;
    Description?: Description;
    LogoUrl?: UrlString;
    DocumentationUrl?: UrlString;
    Categories?: ListOfString;
    Capabilities?: Capabilities;
    ConnectionProperties?: PropertiesMap;
    SparkConnectionProperties?: PropertiesMap;
    AthenaConnectionProperties?: PropertiesMap;
    ConnectionOptions?: PropertiesMap;
    AuthenticationConfiguration?: AuthConfiguration;
    ComputeEnvironmentConfigurations?: ComputeEnvironmentConfigurationMap;
    PhysicalConnectionRequirements?: PropertiesMap;
  }
  export type Description = string;
  export type DescriptionErrorString = string;
  export type DescriptionString = string;
  export type DisplayName = string;
  export type EntityFieldName = string;
  export type EntityName = string;
  export interface ErrorDetail {
    ErrorCode?: NameString;
    ErrorMessage?: DescriptionString;
  }
  export type ExecutionClass = "FLEX"|"STANDARD"|string;
  export type ExecutionTime = number;
  export type ExpressionString = string;
  export interface FederatedCatalog {
    Identifier?: GlueCommonFederationIdentifier;
    ConnectionName?: GlueCommonNameString;
  }
  export interface FederatedTable {
    Identifier?: FederationIdentifier;
    DatabaseIdentifier?: FederationIdentifier;
    ProfileName?: NameString;
    ConnectionName?: NameString;
    ConnectionType?: NameString;
  }
  export type FederationIdentifier = string;
  export type FilterPredicate = string;
  export type FormatString = string;
  export type GenericMap = {[key: string]: GenericString};
  export type GenericString = string;
  export interface GetCatalogRequest {
    Name: CatalogNameString;
    ParentCatalogId?: CatalogIdString;
    CatalogId?: CatalogIdString;
    CatalogIdentifier?: CatalogIdentifier;
    ContextMap?: RequestContextMap;
    FederateToSource?: Boolean;
  }
  export interface GetCatalogResponse {
    Catalog: Catalog;
    DataParameters?: BlobParametersMap;
  }
  export interface GetCatalogsRequest {
    ParentCatalogId?: CatalogIdString;
    NextToken?: NextToken;
    MaxResults?: PageSize;
    Recursive?: NullableBoolean;
    ContextMap?: RequestContextMap;
  }
  export interface GetCatalogsResponse {
    CatalogList: CatalogList;
    NextToken?: NextToken;
  }
  export interface GetCompletionRequest {
    CompletionId: CompletionIdString;
  }
  export interface GetCompletionResponse {
    CompletionId: CompletionIdString;
    StartedOn?: startedOn;
    LastModifiedOn: lastModifiedOn;
    ErrorMessage?: HashString;
    CompletedOn?: completedOn;
    Status: CompletionStatus;
    Completion?: CompletionString;
    SourceURLs?: SourceUrlList;
    Tags?: TagsMap;
  }
  export interface GetEntityRecordsRequest {
    EntityName: EntityName;
    Limit: Limit;
    ConnectionName?: NameString;
    CatalogId?: CatalogIdString;
    NextToken?: NextToken;
    DataStoreApiVersion?: ApiVersion;
    ConnectionOptions?: ConnectionOptions;
    FilterPredicate?: FilterPredicate;
    OrderBy?: String;
    SelectedFields?: SelectedFields;
    StagingConfiguration?: StagingConfiguration;
  }
  export interface GetEntityRecordsResponse {
    Records?: Records;
    NextToken?: NextToken;
  }
  export interface GetJobRunRequest {
    JobName: NameString;
    RunId: IdString;
    PredecessorsIncluded?: BooleanValue;
  }
  export interface GetJobRunResponse {
    JobRun?: JobRun;
  }
  export interface GetJobRunsRequest {
    JobName: NameString;
    NextToken?: OrchestrationToken;
    MaxResults?: OrchestrationPageSize200;
  }
  export interface GetJobRunsResponse {
    JobRuns?: JobRunList;
    NextToken?: OrchestrationToken;
  }
  export interface GetTableRequest {
    DatabaseName: NameString;
    Name: NameString;
    CatalogId?: CatalogIdString;
    TransactionId?: TransactionIdString;
    QueryAsOfTime?: Timestamp;
    IncludeAccessMode?: NullableBoolean;
    IncludeStatusDetails?: NullableBoolean;
    AttributesToGet?: TableAttributesList;
    CatalogIdentifier?: CatalogIdentifier;
    DatabaseIdentifier?: DatabaseIdString;
    TableIdentifier?: TableIdString;
    ContextMap?: RequestContextMap;
  }
  export interface GetTableResponse {
    Table?: Table;
    UseAdvancedFiltering?: NullableBoolean;
  }
  export type GlueCommonDescriptionString = string;
  export type GlueCommonFederationIdentifier = string;
  export type GlueCommonIAMRoleArn = string;
  export type GlueCommonNameString = string;
  export type GlueResourceArn = string;
  export type GlueVersionString = string;
  export type HashString = string;
  export interface IcebergOptimizationPropertiesOutput {
    RoleArn?: GlueCommonIAMRoleArn;
    Compaction?: ParametersMap;
    Retention?: ParametersMap;
    OrphanFileDeletion?: ParametersMap;
    LastUpdatedTime?: Timestamp;
  }
  export type IdString = string;
  export type Integer = number;
  export type IntegerFlag = number;
  export type IntegerValue = number;
  export type JobMode = "SCRIPT"|"VISUAL"|"NOTEBOOK"|string;
  export interface JobRun {
    Id?: IdString;
    Attempt?: AttemptCount;
    PreviousRunId?: IdString;
    TriggerName?: NameString;
    JobName?: NameString;
    JobMode?: JobMode;
    JobRunQueuingEnabled?: NullableBoolean;
    StartedOn?: TimestampValue;
    LastModifiedOn?: TimestampValue;
    CompletedOn?: TimestampValue;
    JobRunState?: JobRunState;
    Arguments?: GenericMap;
    ErrorMessage?: DescriptionErrorString;
    PredecessorRuns?: PredecessorList;
    AllocatedCapacity?: IntegerValue;
    ExecutionTime?: ExecutionTime;
    Timeout?: Timeout;
    MaxCapacity?: NullableDouble;
    WorkerType?: WorkerType;
    NumberOfWorkers?: NullableInteger;
    SecurityConfiguration?: NameString;
    LogGroupName?: LogGroupString;
    NotificationProperty?: NotificationProperty;
    GlueVersion?: GlueVersionString;
    ExecutionClass?: ExecutionClass;
    MinFlexWorkers?: NullableInteger;
    DPUSeconds?: NullableDouble;
    ExecutionArguments?: GenericMap;
    ProfileName?: NameString;
    StateDetail?: OrchestrationMessageString;
    MaintenanceWindow?: MaintenanceWindow;
    UpgradeAnalysisMetadata?: UpgradeAnalysisMetadata;
  }
  export type JobRunList = JobRun[];
  export type JobRunState = "STARTING"|"RUNNING"|"STOPPING"|"STOPPED"|"SUCCEEDED"|"FAILED"|"TIMEOUT"|"ERROR"|"WAITING"|"EXPIRED"|string;
  export type KeyString = string;
  export type LakeFormationPermissionEnforcedEnum = "AllUsers"|"SomeUsers"|"NoUser"|string;
  export type Limit = number;
  export interface ListConnectionTypesRequest {
    MaxResults?: PageSize;
    NextToken?: NextToken;
  }
  export interface ListConnectionTypesResponse {
    ConnectionTypes?: ConnectionTypeList;
    NextToken?: NextToken;
  }
  export type ListOfString = String[];
  export type LocationMap = {[key: string]: ColumnValuesString};
  export type LocationString = string;
  export type LocationStringList = LocationString[];
  export type LogGroupString = string;
  export type MaintenanceWindow = string;
  export type Maximum = number;
  export type Minimum = number;
  export type NameString = string;
  export type NameStringList = NameString[];
  export type NextToken = string;
  export type NonNegativeInteger = number;
  export interface NotificationProperty {
    NotifyDelayAfter?: NotifyDelayAfter;
  }
  export type NotifyDelayAfter = number;
  export type NullableBoolean = boolean;
  export type NullableDouble = number;
  export type NullableInteger = number;
  export type OptionKey = string;
  export type OptionValue = string;
  export type OrchestrationMessageString = string;
  export type OrchestrationPageSize200 = number;
  export type OrchestrationToken = string;
  export interface Order {
    Column: NameString;
    SortOrder: IntegerFlag;
  }
  export type OrderList = Order[];
  export type OutputLocation = string;
  export type PageSize = number;
  export type ParametersMap = {[key: string]: ParametersMapValue};
  export type ParametersMapValue = string;
  export type Permission = "ALL"|"SELECT"|"ALTER"|"DROP"|"DELETE"|"INSERT"|"DESCRIBE"|"CREATE_DATABASE"|"CREATE_TABLE"|"DATA_LOCATION_ACCESS"|"READ"|"WRITE"|"CREATE_LF_TAG"|"ASSOCIATE"|"UPDATE"|"GRANT_WITH_LF_TAG_EXPRESSION"|"CREATE_LF_TAG_EXPRESSION"|string;
  export type PermissionList = Permission[];
  export type Phase = "AUTHENTICATION"|"CONNECTION_CREATION"|string;
  export interface Predecessor {
    JobName?: NameString;
    RunId?: IdString;
  }
  export type PredecessorList = Predecessor[];
  export type PrimitiveInteger = number;
  export interface PrincipalPermissions {
    Principal?: DataLakePrincipal;
    Permissions?: PermissionList;
  }
  export type PrincipalPermissionsList = PrincipalPermissions[];
  export type PromptString = string;
  export type PropertiesMap = {[key: string]: Property};
  export interface Property {
    Name?: PropertyName;
    DisplayName?: PropertyName;
    Description?: PropertyDescriptionString;
    DataType?: DataType;
    Required?: Bool;
    ConditionallyRequired?: ConditionStatements;
    DefaultValue?: String;
    Phase?: Phase;
    PropertyTypes?: PropertyTypes;
    AllowedValues?: AllowedValues;
    Validations?: Validations;
    DataOperationScopes?: DataOperations;
    Order?: PrimitiveInteger;
    DocumentationUrl?: String;
    Reference?: String;
    Format?: String;
  }
  export type PropertyDescriptionString = string;
  export type PropertyName = string;
  export type PropertyNameOverrides = {[key: string]: PropertyName};
  export type PropertyType = "USER_INPUT"|"SECRET"|"READ_ONLY"|"UNUSED"|string;
  export type PropertyTypes = PropertyType[];
  export interface Record {
  }
  export type Records = Record[];
  export type RequestContextKey = string;
  export type RequestContextMap = {[key: string]: RequestContextValue};
  export type RequestContextValue = string;
  export type ResourceAction = "CREATE"|"UPDATE"|string;
  export type ResourceArnString = string;
  export type ResourceState = "QUEUED"|"IN_PROGRESS"|"SUCCESS"|"STOPPED"|"FAILED"|string;
  export interface SchemaId {
    SchemaArn?: GlueResourceArn;
    SchemaName?: SchemaRegistryNameString;
    RegistryName?: SchemaRegistryNameString;
  }
  export interface SchemaReference {
    SchemaId?: SchemaId;
    SchemaVersionId?: SchemaVersionIdString;
    SchemaVersionNumber?: VersionLongNumber;
  }
  export type SchemaRegistryNameString = string;
  export type SchemaVersionIdString = string;
  export type ScopeString = string;
  export type ScriptLocationString = string;
  export type SelectedFields = EntityFieldName[];
  export interface SerDeInfo {
    Name?: NameString;
    SerializationLibrary?: NameString;
    Parameters?: ParametersMap;
  }
  export interface SkewedInfo {
    SkewedColumnNames?: NameStringList;
    SkewedColumnValues?: ColumnValueStringList;
    SkewedColumnValueLocationMaps?: LocationMap;
  }
  export type SourceUrlList = HashString[];
  export interface StagingConfiguration {
    OutputLocation?: OutputLocation;
  }
  export type StartCompletionContext = StartCompletionContextItem[];
  export type StartCompletionContextItem = {[key: string]: HashString};
  export interface StartCompletionRequest {
    Prompt: PromptString;
    Tags?: TagsMap;
    Context?: StartCompletionContext;
  }
  export interface StartCompletionResponse {
    CompletionId: CompletionIdString;
    ConversationId: CompletionIdString;
  }
  export interface StatusDetails {
    RequestedChange?: Table;
    ViewValidations?: ViewValidationList;
  }
  export interface StorageDescriptor {
    Columns?: ColumnList;
    Location?: LocationString;
    AdditionalLocations?: LocationStringList;
    InputFormat?: FormatString;
    OutputFormat?: FormatString;
    Compressed?: Boolean;
    NumberOfBuckets?: Integer;
    SerDeInfo?: SerDeInfo;
    BucketColumns?: NameStringList;
    SortColumns?: OrderList;
    Parameters?: ParametersMap;
    SkewedInfo?: SkewedInfo;
    StoredAsSubDirectories?: Boolean;
    SchemaReference?: SchemaReference;
  }
  export type String = string;
  export interface Table {
    Name: NameString;
    DatabaseName?: NameString;
    Description?: DescriptionString;
    Owner?: NameString;
    CreateTime?: Timestamp;
    UpdateTime?: Timestamp;
    LastAccessTime?: Timestamp;
    LastAnalyzedTime?: Timestamp;
    Retention?: NonNegativeInteger;
    StorageDescriptor?: StorageDescriptor;
    PartitionKeys?: ColumnList;
    ViewOriginalText?: ViewTextString;
    ViewExpandedText?: ViewTextString;
    TableType?: TableTypeString;
    Parameters?: ParametersMap;
    DataParameters?: BlobParametersMap;
    CreatedBy?: NameString;
    IsRegisteredWithLakeFormation?: Boolean;
    LakeFormationPermissionEnforced?: LakeFormationPermissionEnforcedEnum;
    DataAccessMode?: DataAccessModeEnum;
    TargetTable?: TableIdentifier;
    FederatedTable?: FederatedTable;
    CatalogId?: CatalogIdString;
    IsRowFilteringEnabled?: Boolean;
    VersionId?: VersionString;
    CatalogIdentifier?: CatalogIdentifier;
    TableId?: TableIdString;
    DatabaseId?: DatabaseIdString;
    ViewDefinition?: ViewDefinition;
    DataProvider?: NameString;
    IsMultiDialectView?: Boolean;
    Status?: TableStatus;
  }
  export type TableAttributes = "NAME"|"VERSION_ID"|"DATA_ACCESS_MODE"|"DEFAULT"|"ALL"|"TABLE_TYPE"|"DESCRIPTION"|string;
  export type TableAttributesList = TableAttributes[];
  export type TableIdString = string;
  export interface TableIdentifier {
    CatalogId?: CatalogIdString;
    DatabaseName?: NameString;
    Name?: NameString;
    Region?: NameString;
    DatabaseId?: DatabaseIdString;
  }
  export interface TableStatus {
    RequestedBy?: NameString;
    UpdatedBy?: NameString;
    RequestTime?: Timestamp;
    UpdateTime?: Timestamp;
    Action?: ResourceAction;
    State?: ResourceState;
    Error?: ErrorDetail;
    Details?: StatusDetails;
  }
  export type TableTypeString = string;
  export type TagKey = string;
  export type TagValue = string;
  export type TagsMap = {[key: string]: TagValue};
  export interface TargetCatalog {
    CatalogArn?: ResourceArnString;
    CatalogIdentifier?: CatalogIdentifier;
    AutoDiscovery?: Boolean;
  }
  export type Timeout = number;
  export type Timestamp = Date;
  export type TimestampValue = Date;
  export type TransactionIdString = string;
  export type TypeString = string;
  export interface UpgradeAnalysisMetadata {
    ValidationJobRunId?: NameString;
    GlueVersion?: NameString;
    ScriptLocation?: ScriptLocationString;
    AnalysisId?: IdString;
  }
  export type UrlString = string;
  export interface Validation {
    ValidationType?: ValidationType;
    Patterns?: ListOfString;
    Description?: ValidationDescriptionString;
    MaxLength?: Maximum;
    Maximum?: Maximum;
    Minimum?: Minimum;
  }
  export type ValidationDescriptionString = string;
  export interface ValidationDryRunOpts {
    SerializedMockEngineResult?: String;
    ErrorMessage?: String;
    MinimumReceiveCount?: Integer;
  }
  export type ValidationType = "REGEX"|"RANGE"|string;
  export type Validations = Validation[];
  export type Vendor = string;
  export type VersionLongNumber = number;
  export type VersionString = string;
  export interface ViewDefinition {
    IsProtected?: Boolean;
    Definer?: ArnString;
    SubObjects?: ViewSubObjectsList;
    Representations?: ViewRepresentationList;
  }
  export type ViewDialect = "REDSHIFT"|"ATHENA"|"SPARK"|string;
  export type ViewDialectVersionString = string;
  export interface ViewRepresentation {
    Dialect?: ViewDialect;
    DialectVersion?: ViewDialectVersionString;
    ViewOriginalText?: ViewTextString;
    ViewExpandedText?: ViewTextString;
    ValidationConnection?: NameString;
    IsStale?: Boolean;
    ValidationDryRunOpts?: ValidationDryRunOpts;
  }
  export type ViewRepresentationList = ViewRepresentation[];
  export type ViewSubObjectsList = ArnString[];
  export type ViewTextString = string;
  export interface ViewValidation {
    Dialect?: ViewDialect;
    DialectVersion?: ViewDialectVersionString;
    ViewValidationText?: ViewTextString;
    UpdateTime?: Timestamp;
    State?: ResourceState;
    Error?: ErrorDetail;
  }
  export type ViewValidationList = ViewValidation[];
  export type WorkerType = "Standard"|"G_1X"|"G_2X"|"G_4X"|"G_8X"|"G_025X"|"Z_2X"|string;
  export type completedOn = number;
  export type lastModifiedOn = number;
  export type startedOn = number;
  /**
   * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
   */
  export type apiVersion = "2022-07-26"|"latest"|string;
  export interface ClientApiVersions {
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    apiVersion?: apiVersion;
  }
  export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions;
  /**
   * Contains interfaces for use with the GlueCatalogApi client.
   */
  export import Types = GlueCatalogApi;
}
export = GlueCatalogApi;

    

/**
 * THIS FILE IS AUTOGENERATED BY 'generateServiceClient.ts'.
 * DO NOT EDIT BY HAND.
 */

import {Request} from 'aws-sdk/lib/request';
import {Response} from 'aws-sdk/lib/response';
import {AWSError} from 'aws-sdk/lib/error';
import {Service} from 'aws-sdk/lib/service';
import {ServiceConfigurationOptions} from 'aws-sdk/lib/service';
import {ConfigBase as Config} from 'aws-sdk/lib/config-base';
import {Readable} from 'stream';
interface Blob {}
declare class SQLWorkbench extends Service {
  /**
   * Constructs a service object. This object has one method for each API operation.
   */
  constructor(options?: SQLWorkbench.Types.ClientConfiguration)
  config: Config & SQLWorkbench.Types.ClientConfiguration;
  /**
   * 
   */
  cancelQueries(params: SQLWorkbench.Types.CancelQueriesRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.CancelQueriesResponse) => void): Request<SQLWorkbench.Types.CancelQueriesResponse, AWSError>;
  /**
   * 
   */
  cancelQueries(callback?: (err: AWSError, data: SQLWorkbench.Types.CancelQueriesResponse) => void): Request<SQLWorkbench.Types.CancelQueriesResponse, AWSError>;
  /**
   * 
   */
  createConnection(params: SQLWorkbench.Types.CreateConnectionRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.CreateConnectionResponse) => void): Request<SQLWorkbench.Types.CreateConnectionResponse, AWSError>;
  /**
   * 
   */
  createConnection(callback?: (err: AWSError, data: SQLWorkbench.Types.CreateConnectionResponse) => void): Request<SQLWorkbench.Types.CreateConnectionResponse, AWSError>;
  /**
   * 
   */
  deleteConnection(params: SQLWorkbench.Types.DeleteConnectionRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.DeleteConnectionResponse) => void): Request<SQLWorkbench.Types.DeleteConnectionResponse, AWSError>;
  /**
   * 
   */
  deleteConnection(callback?: (err: AWSError, data: SQLWorkbench.Types.DeleteConnectionResponse) => void): Request<SQLWorkbench.Types.DeleteConnectionResponse, AWSError>;
  /**
   * 
   */
  executeQuery(params: SQLWorkbench.Types.ExecuteQueryRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.ExecuteQueryResponse) => void): Request<SQLWorkbench.Types.ExecuteQueryResponse, AWSError>;
  /**
   * 
   */
  executeQuery(callback?: (err: AWSError, data: SQLWorkbench.Types.ExecuteQueryResponse) => void): Request<SQLWorkbench.Types.ExecuteQueryResponse, AWSError>;
  /**
   * 
   */
  exportQueryResults(params: SQLWorkbench.Types.ExportQueryResultsRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.ExportQueryResultsResponse) => void): Request<SQLWorkbench.Types.ExportQueryResultsResponse, AWSError>;
  /**
   * 
   */
  exportQueryResults(callback?: (err: AWSError, data: SQLWorkbench.Types.ExportQueryResultsResponse) => void): Request<SQLWorkbench.Types.ExportQueryResultsResponse, AWSError>;
  /**
   * 
   */
  getConnectableResources(params: SQLWorkbench.Types.GetConnectableResourcesRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetConnectableResourcesResponse) => void): Request<SQLWorkbench.Types.GetConnectableResourcesResponse, AWSError>;
  /**
   * 
   */
  getConnectableResources(callback?: (err: AWSError, data: SQLWorkbench.Types.GetConnectableResourcesResponse) => void): Request<SQLWorkbench.Types.GetConnectableResourcesResponse, AWSError>;
  /**
   * 
   */
  getConnection(params: SQLWorkbench.Types.GetConnectionRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetConnectionResponse) => void): Request<SQLWorkbench.Types.GetConnectionResponse, AWSError>;
  /**
   * 
   */
  getConnection(callback?: (err: AWSError, data: SQLWorkbench.Types.GetConnectionResponse) => void): Request<SQLWorkbench.Types.GetConnectionResponse, AWSError>;
  /**
   * 
   */
  getDatabaseConfigurations(params: SQLWorkbench.Types.GetDatabaseConfigurationsRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetDatabaseConfigurationsResponse) => void): Request<SQLWorkbench.Types.GetDatabaseConfigurationsResponse, AWSError>;
  /**
   * 
   */
  getDatabaseConfigurations(callback?: (err: AWSError, data: SQLWorkbench.Types.GetDatabaseConfigurationsResponse) => void): Request<SQLWorkbench.Types.GetDatabaseConfigurationsResponse, AWSError>;
  /**
   * 
   */
  getQueryExecutionHistory(params: SQLWorkbench.Types.GetQueryExecutionHistoryRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetQueryExecutionHistoryResponse) => void): Request<SQLWorkbench.Types.GetQueryExecutionHistoryResponse, AWSError>;
  /**
   * 
   */
  getQueryExecutionHistory(callback?: (err: AWSError, data: SQLWorkbench.Types.GetQueryExecutionHistoryResponse) => void): Request<SQLWorkbench.Types.GetQueryExecutionHistoryResponse, AWSError>;
  /**
   * 
   */
  getQueryResult(params: SQLWorkbench.Types.GetQueryResultRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetQueryResultResponse) => void): Request<SQLWorkbench.Types.GetQueryResultResponse, AWSError>;
  /**
   * 
   */
  getQueryResult(callback?: (err: AWSError, data: SQLWorkbench.Types.GetQueryResultResponse) => void): Request<SQLWorkbench.Types.GetQueryResultResponse, AWSError>;
  /**
   * 
   */
  getResources(params: SQLWorkbench.Types.GetResourcesRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetResourcesResponse) => void): Request<SQLWorkbench.Types.GetResourcesResponse, AWSError>;
  /**
   * 
   */
  getResources(callback?: (err: AWSError, data: SQLWorkbench.Types.GetResourcesResponse) => void): Request<SQLWorkbench.Types.GetResourcesResponse, AWSError>;
  /**
   * 
   */
  getTabStates(params: SQLWorkbench.Types.GetTabStatesRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.GetTabStatesResponse) => void): Request<SQLWorkbench.Types.GetTabStatesResponse, AWSError>;
  /**
   * 
   */
  getTabStates(callback?: (err: AWSError, data: SQLWorkbench.Types.GetTabStatesResponse) => void): Request<SQLWorkbench.Types.GetTabStatesResponse, AWSError>;
  /**
   * 
   */
  listQueryExecutionHistory(params: SQLWorkbench.Types.ListQueryExecutionHistoryRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.ListQueryExecutionHistoryResponse) => void): Request<SQLWorkbench.Types.ListQueryExecutionHistoryResponse, AWSError>;
  /**
   * 
   */
  listQueryExecutionHistory(callback?: (err: AWSError, data: SQLWorkbench.Types.ListQueryExecutionHistoryResponse) => void): Request<SQLWorkbench.Types.ListQueryExecutionHistoryResponse, AWSError>;
  /**
   * 
   */
  listTagsForResource(params: SQLWorkbench.Types.ListTagsForResourceRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.ListTagsForResourceResponse) => void): Request<SQLWorkbench.Types.ListTagsForResourceResponse, AWSError>;
  /**
   * 
   */
  listTagsForResource(callback?: (err: AWSError, data: SQLWorkbench.Types.ListTagsForResourceResponse) => void): Request<SQLWorkbench.Types.ListTagsForResourceResponse, AWSError>;
  /**
   * 
   */
  pollQueryExecutionEvents(params: SQLWorkbench.Types.PollQueryExecutionEventsRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.PollQueryExecutionEventsResponse) => void): Request<SQLWorkbench.Types.PollQueryExecutionEventsResponse, AWSError>;
  /**
   * 
   */
  pollQueryExecutionEvents(callback?: (err: AWSError, data: SQLWorkbench.Types.PollQueryExecutionEventsResponse) => void): Request<SQLWorkbench.Types.PollQueryExecutionEventsResponse, AWSError>;
  /**
   * 
   */
  tagResource(params: SQLWorkbench.Types.TagResourceRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.TagResourceResponse) => void): Request<SQLWorkbench.Types.TagResourceResponse, AWSError>;
  /**
   * 
   */
  tagResource(callback?: (err: AWSError, data: SQLWorkbench.Types.TagResourceResponse) => void): Request<SQLWorkbench.Types.TagResourceResponse, AWSError>;
  /**
   * 
   */
  untagResource(params: SQLWorkbench.Types.UntagResourceRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.UntagResourceResponse) => void): Request<SQLWorkbench.Types.UntagResourceResponse, AWSError>;
  /**
   * 
   */
  untagResource(callback?: (err: AWSError, data: SQLWorkbench.Types.UntagResourceResponse) => void): Request<SQLWorkbench.Types.UntagResourceResponse, AWSError>;
  /**
   * 
   */
  updateConnection(params: SQLWorkbench.Types.UpdateConnectionRequest, callback?: (err: AWSError, data: SQLWorkbench.Types.UpdateConnectionResponse) => void): Request<SQLWorkbench.Types.UpdateConnectionResponse, AWSError>;
  /**
   * 
   */
  updateConnection(callback?: (err: AWSError, data: SQLWorkbench.Types.UpdateConnectionResponse) => void): Request<SQLWorkbench.Types.UpdateConnectionResponse, AWSError>;
  /**
   * 
   */
  verifyResourcesExistForTagris(params: SQLWorkbench.Types.TagrisVerifyResourcesExistInput, callback?: (err: AWSError, data: SQLWorkbench.Types.TagrisVerifyResourcesExistOutput) => void): Request<SQLWorkbench.Types.TagrisVerifyResourcesExistOutput, AWSError>;
  /**
   * 
   */
  verifyResourcesExistForTagris(callback?: (err: AWSError, data: SQLWorkbench.Types.TagrisVerifyResourcesExistOutput) => void): Request<SQLWorkbench.Types.TagrisVerifyResourcesExistOutput, AWSError>;
}
declare namespace SQLWorkbench {
  export type AckIds = AckIdsMemberString[];
  export type AckIdsMemberString = string;
  export type Arn = string;
  export type AvailableConnectionConfigurationOptions = AvailableConnectionConfigurationOptionsMemberString[];
  export type AvailableConnectionConfigurationOptionsMemberString = string;
  export type Boolean = boolean;
  export interface CancelQueriesRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    accountSettings?: DatabaseConnectionAccountSettings;
    queryExecutionIds: CancelQueriesRequestQueryExecutionIdsList;
    databaseType: DatabaseType;
  }
  export type CancelQueriesRequestQueryExecutionIdsList = CancelQueriesRequestQueryExecutionIdsListMemberString[];
  export type CancelQueriesRequestQueryExecutionIdsListMemberString = string;
  export interface CancelQueriesResponse {
    cancelQueryResponses: CancelQueryResponses;
  }
  export interface CancelQueryResponse {
    queryExecutionId: CancelQueryResponseQueryExecutionIdString;
    queryCancellationStatus?: QueryCancellationStatus;
  }
  export type CancelQueryResponseQueryExecutionIdString = string;
  export type CancelQueryResponses = CancelQueryResponse[];
  export type ChildObjectTypes = ChildObjectTypesMemberString[];
  export type ChildObjectTypesMemberString = string;
  export type Columns = QueryResultCellValue[];
  export interface ConnectableResource {
    displayName: ResourceDisplayName;
    identifier: ResourceIdentifier;
    type?: ConnectableResourceTypeString;
    unavailable?: Boolean;
    tooltipTranslationKey?: ConnectableResourceTooltipTranslationKeyString;
    childObjectTypes: ChildObjectTypes;
    availableConnectionConfigurationOptions: AvailableConnectionConfigurationOptions;
  }
  export type ConnectableResourceTooltipTranslationKeyString = string;
  export type ConnectableResourceTypeString = string;
  export type ConnectableResourceTypes = ConnectableResourceTypesMemberString[];
  export type ConnectableResourceTypesMemberString = string;
  export type ConnectableResources = ConnectableResource[];
  export interface Connection {
    /**
     * Id of the connection
     */
    id?: String;
    /**
     * Name of the connection
     */
    name?: ConnectionName;
    /**
     * Number representing the type of authentication to use (2 = IAM, 3 = Username and Password). Today we only support the types 2 and 3
     */
    authenticationType?: ConnectionAuthenticationTypes;
    /**
     * Secret that is linked to this connection
     */
    secretArn?: String;
    /**
     * Name of the database where the query is run
     */
    databaseName?: DatabaseName;
    /**
     * Id of the cluster of the connection
     */
    clusterId?: String;
    /**
     * User of the database
     */
    dbUser?: DbUser;
    isServerless?: Boolean;
    isProd?: String;
    isEnabled?: String;
    userSettings?: UserSettings;
    recordDate?: String;
    updatedDate?: String;
    tags?: Tags;
    databaseType?: DatabaseType;
    connectableResourceType?: String;
    connectableResourceIdentifier?: ResourceIdentifier;
  }
  export type ConnectionAuthenticationTypes = "2"|"3"|"4"|"5"|"6"|"7"|"8"|string;
  export type ConnectionName = string;
  export type ConnectionProperties = {[key: string]: ConnectionPropertyValue};
  export type ConnectionPropertyKey = string;
  export type ConnectionPropertyValue = string;
  export interface CreateConnectionRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    /**
     * Name of the connection
     */
    name: CreateConnectionRequestNameString;
    /**
     * Name of the database used for this connection
     */
    databaseName: CreateConnectionRequestDatabaseNameString;
    /**
     * Number representing the type of authentication to use (2 = IAM, 3 = Username and Password, 4 = Federated connection)
     */
    authenticationType: CreateConnectionRequestAuthenticationTypeEnum;
    isProd?: CreateConnectionRequestIsProdString;
    userSettings?: UserSettings;
    /**
     * secretArn for redshift cluster
     */
    secretArn?: CreateConnectionRequestSecretArnString;
    /**
     * Id of the cluster used for this connection
     */
    clusterId?: CreateConnectionRequestClusterIdString;
    /**
     * Is serverless connection
     */
    isServerless?: Boolean;
    /**
     * User of the database used for this connection
     */
    dbUser?: DbUser;
    isStoreNewSecret?: CreateConnectionRequestIsStoreNewSecretString;
    /**
     * Username used in the Username_Password connection type
     */
    username?: DbUser;
    /**
     * Password of the user used for this connection
     */
    password?: CreateConnectionRequestPasswordString;
    tags?: Tags;
    /**
     * Host address used for creating secret for Username_Password connection type
     */
    host?: CreateConnectionRequestHostString;
    secretName?: CreateConnectionRequestSecretNameString;
    description?: CreateConnectionRequestDescriptionString;
    databaseType?: DatabaseType;
    /**
     * Id of the connectable resource used for this connection
     */
    connectableResourceIdentifier?: CreateConnectionRequestConnectableResourceIdentifierString;
    /**
     * Type of the connectable resource used for this connection
     */
    connectableResourceType?: CreateConnectionRequestConnectableResourceTypeString;
  }
  export type CreateConnectionRequestAuthenticationTypeEnum = "2"|"3"|"4"|"5"|"6"|"7"|"8"|string;
  export type CreateConnectionRequestClusterIdString = string;
  export type CreateConnectionRequestConnectableResourceIdentifierString = string;
  export type CreateConnectionRequestConnectableResourceTypeString = string;
  export type CreateConnectionRequestDatabaseNameString = string;
  export type CreateConnectionRequestDescriptionString = string;
  export type CreateConnectionRequestHostString = string;
  export type CreateConnectionRequestIsProdString = string;
  export type CreateConnectionRequestIsStoreNewSecretString = string;
  export type CreateConnectionRequestNameString = string;
  export type CreateConnectionRequestPasswordString = string;
  export type CreateConnectionRequestSecretArnString = string;
  export type CreateConnectionRequestSecretNameString = string;
  export interface CreateConnectionResponse {
    data?: Connection;
  }
  export type DatabaseAuthenticationMethod = "USERNAME_PASSWORD"|"TEMPORARY_CREDENTIALS_WITH_IAM"|string;
  export type DatabaseAuthenticationMethods = DatabaseAuthenticationMethod[];
  export interface DatabaseAuthenticationOption {
    connectableResourceType: String;
    authenticationMethods: DatabaseAuthenticationMethods;
  }
  export type DatabaseAuthenticationOptions = DatabaseAuthenticationOption[];
  export interface DatabaseConfiguration {
    databaseType: DatabaseType;
    authenticationOptions: DatabaseAuthenticationOptions;
    connectableResourceTypes: ConnectableResourceTypes;
    sessionSupported: Boolean;
    eventAcknowledgementSupported: Boolean;
    appendingLimitToQuerySupported: Boolean;
    queryStatsSupported: Boolean;
  }
  export type DatabaseConfigurations = DatabaseConfiguration[];
  export interface DatabaseConnectionAccountSettings {
    masterKeyArn?: KmsKeyArn;
  }
  export interface DatabaseConnectionConfiguration {
    id: DatabaseConnectionConfigurationIdString;
    type: DatabaseIntegrationConnectionAuthenticationTypes;
    auth?: DatabaseConnectionConfigurationAuth;
    databaseType: DatabaseType;
    connectableResourceIdentifier: ResourceIdentifier;
    connectableResourceType: DatabaseConnectionConfigurationConnectableResourceTypeString;
    database?: DatabaseName;
  }
  export interface DatabaseConnectionConfigurationAuth {
    secretArn?: SecretKeyArn;
    username?: DatabaseConnectionConfigurationAuthUsernameString;
    password?: DatabaseConnectionConfigurationAuthPasswordString;
  }
  export type DatabaseConnectionConfigurationAuthPasswordString = string;
  export type DatabaseConnectionConfigurationAuthUsernameString = string;
  export type DatabaseConnectionConfigurationConnectableResourceTypeString = string;
  export type DatabaseConnectionConfigurationIdString = string;
  export type DatabaseIntegrationConnectionAuthenticationTypes = "4"|"5"|"6"|"8"|string;
  export type DatabaseName = string;
  export type DatabaseType = "REDSHIFT"|"ATHENA"|string;
  export type DbUser = string;
  export interface DeleteConnectionRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    /**
     * Id of connection to delete
     */
    connectionId: DeleteConnectionRequestConnectionIdString;
  }
  export type DeleteConnectionRequestConnectionIdString = string;
  export interface DeleteConnectionResponse {
  }
  export interface ExecuteQueryRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    connectionId?: ExecuteQueryRequestConnectionIdString;
    databaseType?: DatabaseType;
    connection?: DatabaseConnectionConfiguration;
    accountSettings?: DatabaseConnectionAccountSettings;
    tabId?: ExecuteQueryRequestTabIdString;
    executionContext?: ExecuteQueryRequestExecutionContextList;
    query: ExecuteQueryRequestQueryString;
    queryExecutionType: QueryExecutionType;
    sessionId?: ExecuteQueryRequestSessionIdString;
    queryResponseDeliveryType: QueryResponseDeliveryType;
    maxItems: ExecuteQueryRequestMaxItemsInteger;
    limitQueryResults?: ExecuteQueryRequestLimitQueryResultsInteger;
    isExplain?: Boolean;
    ignoreHistory?: Boolean;
    timeoutMillis?: ExecuteQueryRequestTimeoutMillisInteger;
  }
  export type ExecuteQueryRequestConnectionIdString = string;
  export type ExecuteQueryRequestExecutionContextList = ParentResource[];
  export type ExecuteQueryRequestLimitQueryResultsInteger = number;
  export type ExecuteQueryRequestMaxItemsInteger = number;
  export type ExecuteQueryRequestQueryString = string;
  export type ExecuteQueryRequestSessionIdString = string;
  export type ExecuteQueryRequestTabIdString = string;
  export type ExecuteQueryRequestTimeoutMillisInteger = number;
  export interface ExecuteQueryResponse {
    sessionId?: ExecuteQueryResponseSessionIdString;
    queryExecutions: QueryExecutions;
    statusCode?: statusCode;
  }
  export type ExecuteQueryResponseSessionIdString = string;
  export interface ExportQueryResultsRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    accountSettings?: DatabaseConnectionAccountSettings;
    queryExecutionId: ExportQueryResultsRequestQueryExecutionIdString;
    databaseType: DatabaseType;
    fileType?: FileType;
  }
  export type ExportQueryResultsRequestQueryExecutionIdString = string;
  export interface ExportQueryResultsResponse {
    queryResult: StreamingBlob;
    contentType: String;
    fileName: String;
  }
  export type FileType = "JSON"|"CSV"|string;
  export type FullQueryText = string;
  export interface GetConnectableResourcesRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    accountSettings?: DatabaseConnectionAccountSettings;
    type: GetConnectableResourcesRequestTypeString;
    maxItems: GetConnectableResourcesRequestMaxItemsInteger;
    pageToken?: PageToken;
    databaseType: DatabaseType;
  }
  export type GetConnectableResourcesRequestMaxItemsInteger = number;
  export type GetConnectableResourcesRequestTypeString = string;
  export interface GetConnectableResourcesResponse {
    connectableResources: ConnectableResources;
    nextToken?: String;
  }
  export interface GetConnectionRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    /**
     * Id of connection to delete
     */
    connectionId: GetConnectionRequestConnectionIdString;
  }
  export type GetConnectionRequestConnectionIdString = string;
  export interface GetConnectionResponse {
    data?: Connection;
  }
  export interface GetDatabaseConfigurationsRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    accountSettings?: DatabaseConnectionAccountSettings;
  }
  export interface GetDatabaseConfigurationsResponse {
    configurations?: DatabaseConfigurations;
  }
  export interface GetQueryExecutionHistoryRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    queryExecutionId: GetQueryExecutionHistoryRequestQueryExecutionIdString;
    accountSettings?: DatabaseConnectionAccountSettings;
  }
  export type GetQueryExecutionHistoryRequestQueryExecutionIdString = string;
  export interface GetQueryExecutionHistoryResponse {
    id?: String;
    querySourceId?: String;
    queryStartTime?: Long;
    queryEndTime?: Long;
    status?: QueryExecutionStatus;
    queryText?: FullQueryText;
    serializedMetadata?: SerializedMetadata;
    serializedQueryStats?: SerializedQueryStats;
    databaseType?: DatabaseType;
  }
  export interface GetQueryResultRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    queryExecutionId: GetQueryResultRequestQueryExecutionIdString;
    accountSettings?: DatabaseConnectionAccountSettings;
    pageToken?: PageToken;
    databaseType: DatabaseType;
    pageSize?: GetQueryResultRequestPageSizeInteger;
  }
  export type GetQueryResultRequestPageSizeInteger = number;
  export type GetQueryResultRequestQueryExecutionIdString = string;
  export interface GetQueryResultResponse {
    queryResult?: QueryResult;
    nextToken?: String;
    previousToken?: String;
  }
  export interface GetResourcesRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    connectionId?: GetResourcesRequestConnectionIdString;
    databaseType?: DatabaseType;
    connection?: DatabaseConnectionConfiguration;
    accountSettings?: DatabaseConnectionAccountSettings;
    parents: ParentResources;
    type: GetResourcesRequestTypeString;
    maxItems: GetResourcesRequestMaxItemsInteger;
    pageToken?: PageToken;
    forceRefresh?: Boolean;
    forceRefreshRecursive?: Boolean;
  }
  export type GetResourcesRequestConnectionIdString = string;
  export type GetResourcesRequestMaxItemsInteger = number;
  export type GetResourcesRequestTypeString = string;
  export interface GetResourcesResponse {
    resources?: Resources;
    nextToken?: String;
    statusCode?: statusCode;
    connectionProperties?: ConnectionProperties;
  }
  export interface GetTabStatesRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    accountSettings?: DatabaseConnectionAccountSettings;
    tabId: String;
  }
  export interface GetTabStatesResponse {
    queryExecutionStates: QueryExecutionStates;
    sessionId?: String;
  }
  export type Integer = number;
  export type KmsKeyArn = string;
  export interface ListQueryExecutionHistoryRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    maxItems: ListQueryExecutionHistoryRequestMaxItemsInteger;
    accountSettings?: DatabaseConnectionAccountSettings;
    pageToken?: ListQueryExecutionHistoryRequestPageTokenString;
    querySourceId?: ListQueryExecutionHistoryRequestQuerySourceIdString;
    databaseType?: DatabaseType;
    status?: QueryExecutionStatus;
    startTime?: QueryHistoryTimestamp;
    endTime?: QueryHistoryTimestamp;
    containsText?: ListQueryExecutionHistoryRequestContainsTextString;
  }
  export type ListQueryExecutionHistoryRequestContainsTextString = string;
  export type ListQueryExecutionHistoryRequestMaxItemsInteger = number;
  export type ListQueryExecutionHistoryRequestPageTokenString = string;
  export type ListQueryExecutionHistoryRequestQuerySourceIdString = string;
  export interface ListQueryExecutionHistoryResponse {
    items: QueryExecutionHistoryPreviews;
    nextToken?: ListQueryExecutionHistoryResponseNextTokenString;
  }
  export type ListQueryExecutionHistoryResponseNextTokenString = string;
  export interface ListTagsForResourceRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    resourceArn: Arn;
  }
  export interface ListTagsForResourceResponse {
    tags: Tags;
  }
  export type Long = number;
  export type PageToken = string;
  export interface ParentResource {
    parentId: ParentResourceParentIdString;
    parentType: ParentResourceParentTypeString;
  }
  export type ParentResourceParentIdString = string;
  export type ParentResourceParentTypeString = string;
  export type ParentResources = ParentResource[];
  export interface PollQueryExecutionEventsRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    queryExecutionIds: PollQueryExecutionEventsRequestQueryExecutionIdsList;
    accountSettings?: DatabaseConnectionAccountSettings;
    databaseType: DatabaseType;
    ackIds?: AckIds;
  }
  export type PollQueryExecutionEventsRequestQueryExecutionIdsList = PollQueryExecutionEventsRequestQueryExecutionIdsListMemberString[];
  export type PollQueryExecutionEventsRequestQueryExecutionIdsListMemberString = string;
  export interface PollQueryExecutionEventsResponse {
    events?: QueryExecutionEvents;
  }
  export type QueryCancellationStatus = "CANCELLED"|"DOES_NOT_EXISTS"|"ALREADY_FINISHED"|"CANCELLATION_FAILED"|string;
  export interface QueryExecution {
    queryExecutionStatus?: QueryExecutionStatus;
    queryExecutionId: QueryExecutionQueryExecutionIdString;
    queryResult?: QueryResult;
    queryText?: QueryText;
  }
  export interface QueryExecutionEvent {
    queryExecutionEventType: QueryExecutionEventType;
    queryExecutionId: QueryExecutionEventQueryExecutionIdString;
    queryExecutionStatus?: QueryExecutionStatus;
    queryResult?: QueryResult;
    nextToken?: String;
    ackId?: String;
  }
  export type QueryExecutionEventQueryExecutionIdString = string;
  export type QueryExecutionEventType = "QUERY_EXECUTION_STATUS"|"QUERY_EXECUTION_RESULT"|string;
  export type QueryExecutionEvents = QueryExecutionEvent[];
  export interface QueryExecutionHistoryPreview {
    id?: String;
    querySourceId?: String;
    queryStartTime?: Long;
    queryEndTime?: Long;
    status?: QueryExecutionStatus;
    queryTextPreview?: QueryTextPreview;
    serializedMetadata?: SerializedMetadata;
    databaseType?: DatabaseType;
  }
  export type QueryExecutionHistoryPreviews = QueryExecutionHistoryPreview[];
  export type QueryExecutionQueryExecutionIdString = string;
  export interface QueryExecutionState {
    queryExecutionId: String;
    status: String;
    databaseType: DatabaseType;
  }
  export type QueryExecutionStates = QueryExecutionState[];
  export type QueryExecutionStatus = "SCHEDULED"|"RUNNING"|"FAILED"|"CANCELLED"|"FINISHED"|string;
  export type QueryExecutionType = "PERSIST_SESSION"|"NO_SESSION"|string;
  export interface QueryExecutionWarning {
    message?: QueryExecutionWarningMessage;
    level?: QueryExecutionWarningLevel;
  }
  export type QueryExecutionWarningLevel = "INFO"|"WARNING"|string;
  export type QueryExecutionWarningMessage = string;
  export type QueryExecutionWarnings = QueryExecutionWarning[];
  export type QueryExecutions = QueryExecution[];
  export type QueryHistoryTimestamp = number;
  export type QueryResponseDeliveryType = "SYNC"|"ASYNC"|string;
  export interface QueryResult {
    queryExecutionStatus?: QueryExecutionStatus;
    headers?: QueryResultHeaders;
    rows?: Rows;
    affectedRows?: Integer;
    totalRowCount?: Integer;
    elapsedTime?: Long;
    errorMessage?: QueryResultErrorMessage;
    errorPosition?: Integer;
    queryResultWarningCode?: QueryResultQueryResultWarningCodeString;
    warnings?: QueryExecutionWarnings;
    queryExecutionId?: String;
    sessionId?: String;
    queryText?: QueryText;
    statementType?: StatementType;
    serializedMetadata?: SerializedMetadata;
    connectionProperties?: ConnectionProperties;
  }
  export type QueryResultCellType = "STRING"|"BOOLEAN"|"INTEGER"|"BIG_INTEGER"|"FLOAT"|"BIG_DECIMAL"|"DATE"|"TIME"|"DATETIME"|string;
  export type QueryResultCellValue = string;
  export type QueryResultErrorMessage = string;
  export interface QueryResultHeader {
    displayName: QueryResultHeaderDisplayName;
    type: QueryResultCellType;
  }
  export type QueryResultHeaderDisplayName = string;
  export type QueryResultHeaders = QueryResultHeader[];
  export type QueryResultQueryResultWarningCodeString = string;
  export type QueryText = string;
  export type QueryTextPreview = string;
  export interface Resource {
    displayName: ResourceDisplayName;
    identifier: ResourceIdentifier;
    type?: ResourceTypeString;
    unavailable?: Boolean;
    tooltipTranslationKey?: ResourceTooltipTranslationKeyString;
    childObjectTypes: ChildObjectTypes;
    allowedActions?: ResourceActions;
    resourceMetadata?: ResourceMetadataItems;
  }
  export type ResourceAction = "Drop"|"Truncate"|"GenerateDefinition"|"GenerateSelectQuery"|string;
  export type ResourceActions = ResourceAction[];
  export type ResourceDisplayName = string;
  export type ResourceIdentifier = string;
  export interface ResourceMetadata {
    key?: String;
    value?: String;
  }
  export type ResourceMetadataItems = ResourceMetadata[];
  export type ResourceTooltipTranslationKeyString = string;
  export type ResourceTypeString = string;
  export type Resources = Resource[];
  export interface Row {
    row?: Columns;
  }
  export type Rows = Row[];
  export type SecretKeyArn = string;
  export type SerializedMetadata = string;
  export type SerializedQueryStats = string;
  export type SqlworkbenchSource = "SUS"|"RQEV2"|string;
  export type StatementType = "DQL"|"DML"|"DDL"|"DCL"|"Utility"|string;
  export type StreamingBlob = Buffer|Uint8Array|Blob|string|Readable;
  export type String = string;
  export type TagKey = string;
  export type TagKeyList = TagKey[];
  export interface TagResourceRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    resourceArn: Arn;
    tags: Tags;
  }
  export interface TagResourceResponse {
  }
  export type TagValue = string;
  export type TagrisAccountId = string;
  export type TagrisAmazonResourceName = string;
  export type TagrisInternalId = string;
  export type TagrisStatus = "ACTIVE"|"NOT_ACTIVE"|string;
  export type TagrisSweepList = TagrisSweepListItem[];
  export interface TagrisSweepListItem {
    TagrisAccountId?: TagrisAccountId;
    TagrisAmazonResourceName?: TagrisAmazonResourceName;
    TagrisInternalId?: TagrisInternalId;
    TagrisVersion?: TagrisVersion;
  }
  export type TagrisSweepListResult = {[key: string]: TagrisStatus};
  export interface TagrisVerifyResourcesExistInput {
    TagrisSweepList: TagrisSweepList;
  }
  export interface TagrisVerifyResourcesExistOutput {
    TagrisSweepListResult: TagrisSweepListResult;
  }
  export type TagrisVersion = number;
  export type Tags = {[key: string]: TagValue};
  export interface UntagResourceRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    resourceArn: Arn;
    tagKeys: TagKeyList;
  }
  export interface UntagResourceResponse {
  }
  export interface UpdateConnectionRequest {
    sqlworkbenchSource?: SqlworkbenchSource;
    /**
     * Id of the connection to update
     */
    id: UpdateConnectionRequestIdString;
    /**
     * Name of the connection
     */
    name?: UpdateConnectionRequestNameString;
    /**
     * Name of the database used for this connection
     */
    databaseName?: UpdateConnectionRequestDatabaseNameString;
    /**
     * Number representing the type of authentication to use (2 = IAM, 3 = Username and Password, 4 = Federated connection)
     */
    authenticationType: UpdateConnectionRequestAuthenticationTypeEnum;
    /**
     * secretArn for redshift cluster
     */
    secretArn?: UpdateConnectionRequestSecretArnString;
    /**
     * Id of the cluster used for this connection
     */
    clusterId?: UpdateConnectionRequestClusterIdString;
    /**
     * Is serverless connection
     */
    isServerless?: Boolean;
    /**
     * User of the database used for this connection
     */
    dbUser?: DbUser;
    /**
     * Username used in the Username_Password connection type
     */
    username?: DbUser;
    /**
     * Password of the user used for this connection
     */
    password?: UpdateConnectionRequestPasswordString;
    /**
     * Host address used for creating secret for Username_Password connection type
     */
    host?: String;
    databaseType?: DatabaseType;
    /**
     * Id of the connectable resource used for this connection
     */
    connectableResourceIdentifier?: UpdateConnectionRequestConnectableResourceIdentifierString;
    /**
     * Type of the connectable resource used for this connection
     */
    connectableResourceType?: UpdateConnectionRequestConnectableResourceTypeString;
  }
  export type UpdateConnectionRequestAuthenticationTypeEnum = "2"|"3"|"4"|"5"|"6"|"7"|"8"|string;
  export type UpdateConnectionRequestClusterIdString = string;
  export type UpdateConnectionRequestConnectableResourceIdentifierString = string;
  export type UpdateConnectionRequestConnectableResourceTypeString = string;
  export type UpdateConnectionRequestDatabaseNameString = string;
  export type UpdateConnectionRequestIdString = string;
  export type UpdateConnectionRequestNameString = string;
  export type UpdateConnectionRequestPasswordString = string;
  export type UpdateConnectionRequestSecretArnString = string;
  export interface UpdateConnectionResponse {
    data?: Connection;
  }
  export type UserSettings = string;
  export type statusCode = number;
  /**
   * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
   */
  export type apiVersion = "2024-02-12"|"latest"|string;
  export interface ClientApiVersions {
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    apiVersion?: apiVersion;
  }
  export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions;
  /**
   * Contains interfaces for use with the SQLWorkbench client.
   */
  export import Types = SQLWorkbench;
}
export = SQLWorkbench;

    